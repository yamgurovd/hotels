API

API — это набор общедоступных ручек/рычагов приложения, которые позволяют взаимодействовать с приложением.
Часто приложения бывают очень большие, сложные и запутанные для рядового пользователя.
API представляет из себя простой и понятный пользователю набор инструментов для работы с приложением.

Перед тем, как перейти к примерам из мира программирования, давайте обратимся к примеру-аналогии из реальной жизни:
мы приходим в ресторан и просим официанта подать нам коктейль и закуски. Официант в свою очередь передает наш заказ на кухню,
где происходит приготовление блюд и напитков. Официант для нас является лишь посредником для удобной работы с кухней и поварами:
мы можем не знать поваров, не знать жаргонных словечек и сокращенных названий блюд, не знать, на каком языке они разговаривают.
За нас всю эту работу проделает официант: он знает все сокращенные названия блюд, знает кому отдать заказ на закуски (повару),
а кому — на напиток (бармену). Как итог, через несколько минут официант приносит желаемый заказ, а клиент остается доволен.

Этот пример довольно хорошо описывает работу API и бэкенда в целом:

Языки, на которых разговаривают повара и бармен — это языки программирования
Приготовление блюд можно сравнить с обращением к базе данных овощей и фруктов и обработке этих данных
Официант также, как и мы, может не знать, что на самом деле творится на кухне и в каких пропорциях бармен смешивает алкоголь,
но тем не менее он знает как к ним обратиться и как донести до них наше желание.

Как вы могли догадаться, официант — это и есть API.

Давайте наконец дадим расшифровку этому термину. API — application programming interface или программный интерфейс приложения —
это описание способов обращения с нашим приложением на понятном клиенту (пользователю) языке.
Например, мы можем сконструировать невероятной сложности и проработанности приложение по поиску отелей, но для клиента
мы даем лишь один публичный адрес для обращения: site.com/hotels. Здесь /hotels — это самый маленький элемент нашего API,
называемый эндпоинтом или "ручкой", за которую можно дернуть и получить список отелей. Написанием таких ручек мы будем
заниматься в этом курсе.

API — это не только про веб-приложения

API может быть как у веб-приложений (мы сделаем его в этом курсе), так и, например, у библиотек в Python.
Если вы захотите отправить HTTP запрос на какой-либо сайт, вы можете воспользоваться библиотекой requests и отправить
запрос в одну строчку через requests.get("https://ya.ru").text. Здесь get — это публичный метод библиотеки, который
авторы предлагают использовать пользователю для отправки GET запросов. Всего 1 действие и у вас перед глазами HTML код
главной страницы Яндекса. Под капотом же происходят гораздо более сложные операции, которые вряд ли интересны рядовому
разработчику: добавление заголовков к запросу, работа с редиректами, отправка запроса и др.


FastAPI

FastAPI — это фреймворк (с технической точки зрения это библиотека) на языке Python, который помогает нам быстро и красиво
писать эндпоинты (здесь и далее будет использоваться слово эндпоинт вместо "ручки").

FastAPI вышел в свет совсем недавно — в 2018 году. Его написал 1 человек и продолжает совершенствовать по сей день.
FastAPI на текущий момент занимает 3е место по популярности среди Python backend фреймворков, уступая Django и Flask.
Тем не менее, на глазах автора прослеживается явная тенденция в сторону перехода на FastAPI: появляется все больше вакансий,
где требуют знать как один из фреймворков Django/Flask/FastAPI, так и только FastAPI.

Фреймворк завоевал любовь публики несколькими фишками:

Встроенная асинхронность
Встроенная документация к API в формате OpenAPI (ранее Swagger)
Встроенная в фреймворк валидация данных через библиотеку Pydantic
Простота освоения
Скорость написания приложений
Подробная документация
Удобная работа с вебсокетами (в отличие от Django Channels)

При возникновении у вас любого вопроса по фреймворку в первую очередь рекомендую обращаться к документации к
фреймворку: https://fastapi.tiangolo.com/

pip install fastapi
используйте
pip install 'fastapi[standard]'
!!!!! Я использовал команду pip install fastapi[all] !!!!!
(возможно, понадобится заменить одинарную кавычку на двойную или убрать ее), чтобы установить полный набор библиотек,
 который понадобится нам в курсе.
В целом, можно и по ходу дела их устанавливать, но лучше перестраховаться и установить всё сразу :)

⚠️ Если у вас Windows, и вы опираетесь на файл requirements.txt из репозитория, необходимо удалить библиотеку uvloop,
так как она не поддерживается на Windows.

Uvloop — это замена классического событийного цикла на Python. Когда дойдете до модуля с разворотом приложения на сервер,
рекомендую вернуть Uvloop, так как на всех арендуемых серверах обычно стоит Linux

Запуск FastAPI
Первый способ
Самый простой способ запустить FastAPI — написать в терминале команду
fastapi dev main.py
Если вы только начинаете путь в backend разработку, вы можете пользоваться этой командой.

Второй способ
Этот способ вы чаще всего могли видеть в видеоуроках и статьях на просторах интернета, так как он был доминирующим предыдущие 5 лет.

Давайте порассуждаем, как нам запустить наше приложение локально. API в контексте веб-приложений
(API бывает не только у веб-приложений) подразумевает, что у нас есть сервер (за который отвечают backend разработчики)
и клиент (браузер или другой разработчик). Чтобы была возможность обрабатывать пользовательские запросы, необходим веб-сервер.
Uvicorn — один из них, это асинхронный веб-сервер (с технической точки зрения это библиотека). Uvicorn получает
пользовательский запрос и передает его FastAPI. При отправке ответа пользователю FastAPI передает uvicorn'у ответ, а тот,
в свою очередь, передает его пользователю.

Для запуска uvicorn достаточно установить библиотеку в виртуальное окружение, перейти в директорию с проектом и
запустить веб-сервер в терминале через команду
uvicorn main:app --reload
которая запустит наше FastAPI приложение на порту 8000 по адресу http://localhost:8000/. Перейдя по этой ссылке в браузере,
вы должны увидеть сообщение {"detail": "Not found"}. Для перехода к документации API
необходимо зайти по адресу http://localhost:8000/docs или http://localhost:8000/redoc.

Третий способ
Этот способ используют в production коде, поэтому я рекомендую использовать его тем, кто уже немного писал на FastAPI.

Для запуска приложения необходимо прописать в файле main.py следующий код:
if __name__ == "__main__":
    uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True)
В таком случае приложение запускают через привычный вам
python main.py
В таком случае команда максимально лаконична, а все параметры запуска (а их может быть более 10 штук),
конфигурируются внутри файла main.py