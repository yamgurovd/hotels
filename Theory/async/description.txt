Асинхронность в Python позволяет выполнять задачи одновременно, что повышает производительность при работе с операциями
ввода-вывода, такими как обращения к базе данных, сетевые запросы и чтение/запись файлов. В синхронных программах задачи
выполняются последовательно, каждая из них блокирует выполнение остальных. Асинхронный подход, напротив, позволяет "ожидать"
завершения одной задачи, продолжая при этом выполнять другие.

async/await
Ключевые слова async и await используются для работы с асинхронными функциями. Функция, объявленная с помощью async,
может включать операторы await, которые приостанавливают выполнение функции до завершения ожидаемой задачи
(например, сетевой запрос). Асинхронные функции не блокируют основной поток программы, что позволяет эффективно использовать
ресурсы системы.

asyncio.gather
asyncio.gather — это полезная функция для выполнения нескольких асинхронных задач параллельно. Она принимает список корутин
(асинхронных функций) и возвращает результат выполнения всех этих функций. Это удобно, когда необходимо выполнять несколько задач,
не дожидаясь завершения каждой по отдельности.

Пример смотри в example.ipynb